# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.25.0
# source: verses.sql
import dataclasses
from typing import Any, AsyncIterator, Iterator, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from db.sqlcgen import models


GET_SIMILAR_VERSES = """-- name: get_similar_verses \\:many
SELECT id, book, chapter, verse, content, embedding, created_at FROM verses ORDER BY embedding <=> :p1 LIMIT :p2
"""


GET_VERSE = """-- name: get_verse \\:one
SELECT id, book, chapter, verse, content, embedding, created_at FROM verses WHERE id = :p1
"""


INSERT_VERSE = """-- name: insert_verse \\:one
INSERT INTO verses (book, chapter, verse, content, embedding) VALUES (:p1, :p2, :p3, :p4, :p5) RETURNING id, book, chapter, verse, content, embedding, created_at
"""


@dataclasses.dataclass()
class InsertVerseParams:
    book: Optional[str]
    chapter: Optional[int]
    verse: Optional[int]
    content: str
    embedding: Any


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_similar_verses(self, *, embedding: Any, limit: int) -> Iterator[models.Verse]:
        result = self._conn.execute(sqlalchemy.text(GET_SIMILAR_VERSES), {"p1": embedding, "p2": limit})
        for row in result:
            yield models.Verse(
                id=row[0],
                book=row[1],
                chapter=row[2],
                verse=row[3],
                content=row[4],
                embedding=row[5],
                created_at=row[6],
            )

    def get_verse(self, *, id: uuid.UUID) -> Optional[models.Verse]:
        row = self._conn.execute(sqlalchemy.text(GET_VERSE), {"p1": id}).first()
        if row is None:
            return None
        return models.Verse(
            id=row[0],
            book=row[1],
            chapter=row[2],
            verse=row[3],
            content=row[4],
            embedding=row[5],
            created_at=row[6],
        )

    def insert_verse(self, arg: InsertVerseParams) -> Optional[models.Verse]:
        row = self._conn.execute(sqlalchemy.text(INSERT_VERSE), {
            "p1": arg.book,
            "p2": arg.chapter,
            "p3": arg.verse,
            "p4": arg.content,
            "p5": arg.embedding,
        }).first()
        if row is None:
            return None
        return models.Verse(
            id=row[0],
            book=row[1],
            chapter=row[2],
            verse=row[3],
            content=row[4],
            embedding=row[5],
            created_at=row[6],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_similar_verses(self, *, embedding: Any, limit: int) -> AsyncIterator[models.Verse]:
        result = await self._conn.stream(sqlalchemy.text(GET_SIMILAR_VERSES), {"p1": embedding, "p2": limit})
        async for row in result:
            yield models.Verse(
                id=row[0],
                book=row[1],
                chapter=row[2],
                verse=row[3],
                content=row[4],
                embedding=row[5],
                created_at=row[6],
            )

    async def get_verse(self, *, id: uuid.UUID) -> Optional[models.Verse]:
        row = (await self._conn.execute(sqlalchemy.text(GET_VERSE), {"p1": id})).first()
        if row is None:
            return None
        return models.Verse(
            id=row[0],
            book=row[1],
            chapter=row[2],
            verse=row[3],
            content=row[4],
            embedding=row[5],
            created_at=row[6],
        )

    async def insert_verse(self, arg: InsertVerseParams) -> Optional[models.Verse]:
        row = (await self._conn.execute(sqlalchemy.text(INSERT_VERSE), {
            "p1": arg.book,
            "p2": arg.chapter,
            "p3": arg.verse,
            "p4": arg.content,
            "p5": arg.embedding,
        })).first()
        if row is None:
            return None
        return models.Verse(
            id=row[0],
            book=row[1],
            chapter=row[2],
            verse=row[3],
            content=row[4],
            embedding=row[5],
            created_at=row[6],
        )
